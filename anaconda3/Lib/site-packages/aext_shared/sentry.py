import logging

from sentry_sdk.types import Event, Hint

logger = logging.getLogger()

# only events containing those module keywords will be sent
SENTRY_EVENTS_ALLOW_LIST = [
    "aext_project_filebrowser_server",
    "aext_panel_server",
    "aext_shared_server",
    "aext_core_server",
    "aext_share_notebook_server",
    "aext_resource_manager_server",
    "aext_profile_manager_server",
    "aext_lms_notebooks_server",
    "aext_events_server",
    "aext_data_catalog_server",
    "aext_assistant_server",
]


def sentry_before_send(event: Event, hint: Hint) -> Event:
    """
    This function is executed before sending events to Sentry. The goal is to make sure only
    relevant exceptions are going to land into our monitoring, since Sentry captures all sort
    of errors, including core errors from JupyterLab, which is not our focus.

    """

    try:
        if event is not None:
            request_url = event.get("request", {}).get("url", "")
            for allowed_string in SENTRY_EVENTS_ALLOW_LIST:
                if allowed_string in request_url:
                    return event

            if stacktrace := event.get("stacktrace", {}):
                frames = stacktrace.get("frames", [])
                for frame in frames:
                    for allowed_string in SENTRY_EVENTS_ALLOW_LIST:
                        found_in_vars = allowed_string in frame.get("vars", {}).get("self", "")
                        found_in_abs_path = allowed_string in frame.get("abs_path", "")
                        found_in_filename = allowed_string in frame.get("filename", "")

                        if found_in_filename or found_in_vars or found_in_abs_path:
                            return event

            return None  # event won't be sent
    except Exception as ex:
        logger.error(f"Failed to process sentry event {event}. Exception {ex}")
