import asyncio
import json
from dataclasses import asdict, dataclass
from datetime import datetime
from typing import Dict, List, Optional, Type
from uuid import uuid4

import tornado
from tornado.routing import _RuleList

from aext_core_server.logger import logger
from aext_shared.backend_proxy import ProxyResponse
from aext_shared.config import get_config
from aext_shared.errors import BackendError, UnauthorizedError
from aext_shared.handler import BackendHandler, create_rules

config = get_config()


class ConfigHandler(BackendHandler):
    @tornado.web.authenticated
    async def get(self):
        self.finish(config)


class FeatureFlagInitHandler(BackendHandler):
    @tornado.web.authenticated
    async def get(self):
        [account, organizations, account_notebooks] = await asyncio.gather(
            self.anaconda_cloud_proxy("account"),
            self.anaconda_cloud_proxy("organizations/my"),
            self.anaconda_cloud_proxy("account/notebooks"),
        )
        data = account["remote_data"]
        # Keep in sync with passport_to_feature_flag_user in nucleus
        # https://github.com/anaconda/bigbend-platform/blob/main/shared/python/shared/feature_flags.py#L83
        email: str = data["user"].get("email", "")
        is_confirmed: bool = data["profile"]["is_confirmed"]
        is_disabled: bool = data["profile"]["is_disabled"]
        is_anaconda_email = email.lower().endswith("@anaconda.com") and is_confirmed and not is_disabled
        org_ids = [o["id"] for o in organizations["remote_data"]]
        feature_flag_context = {
            "key": f"user:{data['user']['id']}",
            "kind": "user",
            "confirmed": is_confirmed,
            "disabled": is_disabled,
            "is_anaconda_employee": is_anaconda_email,
            "email": data["user"]["email"],
            "username": data["user"]["username"],
            "org_ids": org_ids,
            "notebooks_service_subscription": account_notebooks["remote_data"]["notebooks_service_subscription"],
            "platform": config["platform"],
            "environment": config["environment"],
            "environment_v2": config["environment_v2"],
        }
        self.finish(ProxyResponse(remote_status_code=200, remote_data=feature_flag_context))


class AnacondaCloudUserOrganizationsHandler(BackendHandler):

    @dataclass
    class UserOrganization:
        id: uuid4
        name: str
        title: str
        created_at: datetime
        members_count: int
        role: str

    @tornado.web.authenticated
    async def get(self):
        try:
            response = await self.anaconda_cloud_proxy("organizations/my")
            data = response["remote_data"]
            user_orgs = [
                asdict(
                    self.UserOrganization(
                        id=item["id"],
                        name=item["name"],
                        title=item["title"],
                        created_at=item["created_at"],
                        members_count=item["members_count"],
                        role=item["role"],
                    )
                )
                for item in data
            ]
            self.finish(json.dumps(user_orgs))
        except UnauthorizedError:
            self.set_status(403, "Could not find user credentiansl")
        except BackendError as ex:
            remote_status_code = ex.data.get("remote_status_code")
            if remote_status_code == 403:
                logger.warning("Forbidden: Can't fetch info from Anaconda Cloud")
                status_message = "Forbidden: Check user credentials"
            elif remote_status_code == 404:
                logger.debug("Not found endpoint")
                status_message = "Forbidden: Check user credentials"
            else:
                status_message = "Unknown error"
            self.set_status(remote_status_code, status_message)
        except Exception:
            self.set_status(500, "Unknown error")


class AnacondaCloudOrganizationMembersHandler(BackendHandler):

    @dataclass
    class OrgMember:
        id: uuid4
        email: str
        first_name: str
        last_name: str
        role: str
        subscriptions: List[str]
        groups: Optional[List[str]] = None

    @dataclass
    class OrgMembers:
        members: List["AnacondaCloudOrganizationMembersHandler.OrgMember"]

    @tornado.web.authenticated
    async def get(self, org_name: str):
        try:
            response = await self.anaconda_cloud_proxy(f"organizations/{org_name}/users")
            data = response["remote_data"]
            members = [
                asdict(
                    self.OrgMember(
                        id=item["id"],
                        email=item["email"],
                        first_name=item["first_name"],
                        last_name=item["last_name"],
                        role=item["role"],
                        subscriptions=item["subscriptions"],
                        groups=item["groups"],
                    )
                )
                for item in data["items"]
            ]
            org_members = asdict(self.OrgMembers(members=members))
            self.finish(json.dumps(org_members))
        except UnauthorizedError:
            self.set_status(403, "Could not find user credentiansl")
        except BackendError as ex:
            remote_status_code = ex.data.get("remote_status_code")
            if remote_status_code == 403:
                logger.warning("Forbidden: Can't fetch info from Anaconda Cloud")
                status_message = "Forbidden: Check user credentials"
            elif remote_status_code == 404:
                logger.debug("Not found endpoint")
                status_message = "Forbidden: Check user credentials"
            else:
                status_message = "Unknown error"
            self.set_status(remote_status_code, status_message)
        except Exception:
            self.set_status(500, "Unknown error")


def get_routes(base_url: str) -> _RuleList:
    handlers: Dict[str, Type[BackendHandler]] = {
        "config": ConfigHandler,
        "feature_flag/init": FeatureFlagInitHandler,
        "user/organizations": AnacondaCloudUserOrganizationsHandler,
        r"organization/([^/]+)/members": AnacondaCloudOrganizationMembersHandler,
    }
    return create_rules(base_url, "aext_core_server", handlers)
